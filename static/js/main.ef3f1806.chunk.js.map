{"version":3,"sources":["static-data.js","reducers/contacts.js","constants/action-types.js","reducers/index.js","reducers/user.js","reducers/messages.js","reducers/typing.js","reducers/activeUserId.js","store/index.js","actions/index.js","containers/user.js","components/sidebar.js","components/empty.js","containers/chat.js","components/header.js","containers/messageInput.js","containers/chatWindow.js","components/main.js","containers/App.js","index.js"],"names":["numberOfUsers","shortid","require","txtgen","faker","_","users","Array","from","length","generateUser","contacts","mapKeys","getMessages","messagesPerUser","messages","forEach","user","numberOfMsgs","user_id","Object","objectSpread","v","i","number","text","sentence","is_user_msg","random","boolean","name","findName","email","internet","profile_pic","avatar","status","generate","SET_ACTIVE_USER_ID","SET_TYPING_VALUE","SEND_MESSAGE","combineReducers","state","arguments","undefined","action","type","_action$payload","payload","message","userId","allUserMsgs","keys","pop","defineProperty","typing","activeUserId","store","createStore","reducer","setActiveUserId","id","User","_ref","react_default","a","createElement","className","onClick","_ref2","console","log","dispatch","bind","src","alt","Sidebar","map","contact","src_containers_user","key","Empty","first_name","split","Chat","concat","Chats","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","scrollToBottom","chatsRef","current","scrollTop","scrollHeight","React","createRef","ref","chat_Chat","Component","Header","MessageInput","value","getState","onSubmit","e","preventDefault","onChange","target","placeholder","ChatWindow","activeUser","activeMsgs","components_header","containers_chat","values","containers_messageInput","Main","containers_chatWindow","components_empty","App","_store$getState","components_sidebar","components_main","render","ReactDOM","src_containers_App","document","getElementById","subscribe"],"mappings":"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","file":"static/js/main.ef3f1806.chunk.js","sourcesContent":["const shortid = require(\"shortid\"); // shortid.generate() returns a unique \"short\" id\r\nconst txtgen = require(\"txtgen\"); // txtgen.sentence() returns random \"readable\" sentences\r\nconst faker = require(\"faker\"); // faker is used for generating random fake data.\r\nconst _ = require(\"lodash\"); // lodash is a utility lib for Javascript\r\n\r\nconst users = generateUsers(10);\r\nexport const contacts = _.mapKeys(users, \"user_id\");\r\nexport const getMessages = messagesPerUser => {\r\n  let messages = {};\r\n  _.forEach(users, user => {\r\n    messages[user.user_id] = {\r\n      ..._.mapKeys(generateMsgs(messagesPerUser), \"number\")\r\n    };\r\n  });\r\n  return messages;\r\n};\r\n\r\n// just an example of how the state object is structured\r\nexport const state = {\r\n  user: generateUser(),\r\n  messages: getMessages(10),\r\n  typing: \"\",\r\n  contacts,\r\n  activeUserId: null\r\n};\r\n\r\n/**\r\n * @returns {Object} - a new user object\r\n */\r\nexport function generateUser() {\r\n  return {\r\n    name: faker.name.findName(),\r\n    email: faker.internet.email(),\r\n    profile_pic: faker.internet.avatar(),\r\n    status: txtgen.sentence(),\r\n    user_id: shortid.generate()\r\n  };\r\n}\r\n/**\r\n * @returns {Object} - a new message object\r\n */\r\nfunction generateMsg(number) {\r\n  return {\r\n    number,\r\n    text: txtgen.sentence(),\r\n    is_user_msg: faker.random.boolean()\r\n  };\r\n}\r\n/**\r\n *\r\n * @param {Number} numberOfUsers - the number of users to be generated\r\n * @param {Function} generateUser - function that generates a single user\r\n * @returns {Array} - an array of user objects with length n = numberOfUsers\r\n */\r\nfunction generateUsers(numberOfUsers) {\r\n  return Array.from({ length: numberOfUsers }, () => generateUser());\r\n}\r\n\r\nfunction generateMsgs(numberOfMsgs) {\r\n  return Array.from({ length: numberOfMsgs }, (v, i) => generateMsg(i));\r\n}","import { contacts } from \"../static-data\";\r\n\r\nexport default (state = contacts, action) => {\r\n  return state;\r\n};","export const SET_ACTIVE_USER_ID = \"SET_ACTIVE_USER_ID\";\r\n\r\nexport const SET_TYPING_VALUE = \"SET_TYPING_VALUE\";\r\n\r\nexport const SEND_MESSAGE = \"SEND_MESSAGE\";","import user from \"./user\";\r\nimport contacts from \"./contacts\";\r\nimport activeUserId from \"./activeUserId\";\r\nimport messages from \"./messages\";\r\nimport typing from \"./typing\";\r\nimport { combineReducers } from \"redux\";\r\n\r\nexport default combineReducers({\r\n    user,\r\n    messages,\r\n    typing,\r\n    contacts,\r\n    activeUserId\r\n  });","import { generateUser } from \"../static-data\";\r\nexport default function user(state = generateUser(), action) {\r\n  return state;\r\n}","import { getMessages } from \"../static-data\";\r\nimport { SEND_MESSAGE } from \"../constants/action-types\";\r\nimport _ from \"lodash\";\r\n\r\nexport default function messages(state = getMessages(10), action) {\r\n  switch (action.type) {\r\n    case SEND_MESSAGE:\r\n      const { message, userId } = action.payload;\r\n      const allUserMsgs = state[userId];\r\n      const number = +_.keys(allUserMsgs).pop() + 1;\r\n\r\n      return {\r\n        ...state,\r\n        [userId]: {\r\n          ...allUserMsgs,\r\n          [number]: {\r\n            number,\r\n            text: message,\r\n            is_user_msg: true\r\n          }\r\n        }\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}","import { SET_TYPING_VALUE, SEND_MESSAGE } from \"../constants/action-types\";\r\n\r\nexport default function typing(state = \"\", action) {\r\n  switch (action.type) {\r\n    case SET_TYPING_VALUE:\r\n      return action.payload;\r\n    case SEND_MESSAGE:\r\n      return \"\";\r\n    default:\r\n      return state;\r\n  }\r\n}","import { SET_ACTIVE_USER_ID } from \"../constants/action-types\";\r\nexport default function activeUserId(state = null, action) {\r\n  switch (action.type) {\r\n    case SET_ACTIVE_USER_ID:\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n}","import { createStore } from \"redux\";\r\nimport reducer from \"../reducers/\";\r\n\r\n\r\nconst store = createStore(reducer);\r\n\r\nexport default store;","import {\r\n  SET_ACTIVE_USER_ID,\r\n  SET_TYPING_VALUE,\r\n  SEND_MESSAGE\r\n} from \"../constants/action-types\";\r\n\r\nexport const setActiveUserId = id => ({\r\n  type: SET_ACTIVE_USER_ID,\r\n  payload: id\r\n});\r\n\r\nexport const setTypingValue = value => ({\r\n  type: SET_TYPING_VALUE,\r\n  payload: value\r\n});\r\n\r\nexport const sendMessage = (message, userId) => ({\r\n  type: SEND_MESSAGE,\r\n  payload: {\r\n    message,\r\n    userId\r\n  }\r\n});","import React from \"react\";\r\nimport \"./user.css\";\r\nimport store from \"../store\";\r\nimport { setActiveUserId } from \"../actions\";\r\n\r\nconst User = ({ user }) => {\r\n  const { name, profile_pic, status } = user;\r\n\r\n  return (\r\n    <div className=\"User\" onClick={handleUserClick.bind(null, user)}>\r\n      <img src={profile_pic} alt={name} className=\"User__pic\" />\r\n      <div className=\"User__details\">\r\n        <p className=\"User__details-name\">{name}</p>\r\n        <p className=\"User__details-status\">{status}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction handleUserClick({ user_id }) {\r\n  console.log(user_id);\r\n  store.dispatch(setActiveUserId(user_id));\r\n}\r\n\r\nexport default User;","import React from \"react\";\r\nimport User from \"../containers/user\"; \r\nimport \"./sidebar.css\";\r\n\r\nconst Sidebar = ({ contacts }) => {\r\n  return (\r\n    <aside className=\"Sidebar\">\r\n      {contacts.map(contact => <User user={contact} key={contact.user_id} />)}\r\n    </aside>\r\n  );\r\n};\r\n\r\nexport default Sidebar;","import React from \"react\";\r\nimport \"./empty.css\";\r\n\r\nconst Empty = ({ user }) => {\r\n  const { name, profile_pic, status } = user;\r\n  const first_name = name.split(\" \")[0];\r\n\r\n  return (\r\n    <div className=\"Empty\">\r\n      <h1 className=\"Empty__name\">Welcome, {first_name} </h1>\r\n      <img src={profile_pic} alt={name} className=\"Empty__img\" />\r\n      <p className=\"Empty__status\">\r\n        <b>Status:</b> {status}\r\n      </p>\r\n      <button className=\"Empty__btn\">Start a conversation</button>\r\n      <p className=\"Empty__info\">\r\n        Search for someone to start chatting with or go to Contacts to see who\r\n        is available\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Empty;","import React, { Component } from \"react\";\r\nimport \"./chat.css\";\r\n\r\nconst Chat = ({ message }) => {\r\n  const { text, is_user_msg } = message;\r\n  return (\r\n    <span className={`Chat ${is_user_msg ? \"is-user-msg\" : \"\"}`}>{text}</span>\r\n  );\r\n};\r\n\r\nclass Chats extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.chatsRef = React.createRef();\r\n  }\r\n  componentDidMount() {\r\n    this.scrollToBottom();\r\n  }\r\n  componentDidUpdate() {\r\n    this.scrollToBottom();\r\n  }\r\n  scrollToBottom = () => {\r\n    this.chatsRef.current.scrollTop = this.chatsRef.current.scrollHeight;\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"Chats\" ref={this.chatsRef}>\r\n        {this.props.messages.map(message => (\r\n          <Chat message={message} key={message.number} />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Chats;","import React from \"react\";\r\nimport \"./header.css\";\r\n\r\nfunction Header({ user }) {\r\n  const { name, status } = user;\r\n  return (\r\n    <header className=\"Header\">\r\n      <h1 className=\"Header__name\">{name}</h1>\r\n      <p className=\"Header__status\">{status}</p>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\nimport store from \"../store\";\r\nimport { setTypingValue, sendMessage } from \"../actions\";\r\nimport \"./messageInput.css\";\r\n\r\nconst MessageInput = ({ value }) => {\r\n\r\n  const handleChange = e => {\r\n    store.dispatch(setTypingValue(e.target.value));\r\n  };\r\n\r\n  const state = store.getState();  \r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    const { typing, activeUserId } = state;\r\n    store.dispatch(sendMessage(typing, activeUserId));\r\n  };\r\n\r\n  return (\r\n    <form className=\"Message\" onSubmit={handleSubmit}>\r\n      <input\r\n        className=\"Message__input\"\r\n        onChange={handleChange}\r\n        value={value}\r\n        placeholder=\"write a message\"\r\n      />\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default MessageInput;","import React from \"react\";\r\nimport store from \"../store\";\r\nimport Chats from \"../containers/chat\"; \r\nimport Header from \"../components/header\";\r\nimport './chatWindow.css';\r\nimport _ from \"lodash\";\r\nimport MessageInput from \"./messageInput\";\r\n\r\n\r\nconst ChatWindow = ({ activeUserId }) => {\r\n  const state = store.getState();\r\n  const { typing } = state;\r\n  const activeUser = state.contacts[activeUserId];\r\n  const activeMsgs = state.messages[activeUserId];\r\n\r\n  return (\r\n    <div className=\"ChatWindow\">\r\n      <Header user={activeUser} />\r\n      <Chats messages={_.values(activeMsgs)} />\r\n      <MessageInput value={typing} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatWindow;","import React from \"react\";\r\nimport \"./main.css\";\r\nimport Empty from \"../components/empty\";\r\nimport ChatWindow from \"../containers/chatWindow\";\r\n\r\nconst Main = ({ user, activeUserId }) => {\r\n  const renderMainContent = () => {\r\n    if (!activeUserId) {\r\n      return <Empty user={user} activeUserId={activeUserId} />;\r\n    } else {\r\n      return <ChatWindow activeUserId={activeUserId} />;\r\n    }\r\n  };\r\n  return <main className=\"Main\">{renderMainContent()}</main>;\r\n};\r\n\r\nexport default Main;","import React from 'react';\nimport Sidebar from \"../components/sidebar\";\nimport Main from \"../components/main\";\nimport './App.css';\nimport store  from '../store';\nimport _ from 'lodash';\n\nconst App = () => {\n  const { contacts, user, activeUserId  } = store.getState();\n  return (\n    <div className=\"App\">\n      <Sidebar contacts={_.values(contacts)} />\n      <Main user={user} activeUserId={activeUserId} />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\n// import registerServiceWorker from \"./serviceWorker\";\nimport store from \"./store\";\n\nconst render = () => {\n  fancyLog();\n  return ReactDOM.render(<App />, document.getElementById(\"root\"));\n};\n\nrender();\nstore.subscribe(render);\n// registerServiceWorker();\n\nfunction fancyLog() {\n  console.log(\"%c Rendered with 👉 👉👇\", \"background: purple; color: #fff\");\n  console.log(store.getState());\n}"],"sourceRoot":""}